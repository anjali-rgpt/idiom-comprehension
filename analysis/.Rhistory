xlab("Log-transformed CELEX lemma frequency") +
scale_color_manual(name="Native language",values=wes_palette("Zissou1")[2:3]) +
theme(legend.position="bottom")
library(wesanderson)
mean_rt = mean(lexdec$RT)
ggplot(lexdec, aes(x=Frequency,y=RT,color=NativeLanguage)) +
geom_point() +
geom_smooth(method="lm") +
geom_hline(yintercept=mean_rt,linetype="dashed",color="red") +
ylab("Log-transformed reaction time") +
xlab("Log-transformed CELEX lemma frequency") +
scale_color_manual(name="Native language",values=wes_palette("Zissou1")[2:3]) +
theme(legend.position="bottom")
ggplot(lexdec, aes(x=Frequency,y=RT,color=NativeLanguage)) +
geom_point() +
geom_smooth(method="lm") +
# geom_hline(yintercept=mean_rt,linetype="dashed",color="red") +
ylab("Log-transformed reaction time") +
xlab("Log-transformed CELEX lemma frequency") +
scale_color_manual(name="Native language",values=wes_palette("Zissou1")[2:3]) +
theme(legend.position="bottom")
lexdec$rawRT = exp(lexdec$RT)
agr = lexdec %>%
group_by(NativeLanguage) %>%
summarize(MeanRT = mean(rawRT), CI.Low = ci.low(rawRT), CI.High = ci.high(rawRT)) %>%
mutate(YMin = MeanRT - CI.Low, YMax = MeanRT + CI.High)
ggplot(agr, aes(x=NativeLanguage,y=MeanRT)) +
geom_bar(stat="identity",color="black",fill="gray60") +
geom_jitter(data=lexdec,aes(y=rawRT),alpha=.2,color="lightblue") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.25)
agr
ggplot(agr, aes(x=NativeLanguage,y=MeanRT)) +
geom_bar(stat="identity",color="black",fill="red") +
geom_jitter(data=lexdec,aes(y=rawRT),alpha=.2,color="lightblue") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.25)
ggplot(agr, aes(x=NativeLanguage,y=MeanRT)) +
geom_bar(stat="identity",color="black",fill="lightgreen") +
geom_jitter(data=lexdec,aes(y=rawRT),alpha=.2,color="lightblue") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.25)
ggplot(agr, aes(x=NativeLanguage,y=MeanRT)) +
geom_bar(stat="identity",color="black",fill="lightgreen") +
geom_jitter(data=lexdec,aes(y=rawRT),alpha=.2,color="orange") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.25)
source("~/Stanford/Coursework/LINGUIST245B/LINGUIST245B/LINGUIST245B/code_sheets/1_linear_regression_withprompts.R", echo=TRUE)
# Load the `languageR` and `brms` packages. If they're not yet installed you'll get an error saying "Error in library(languageR) : there is no package called ‘languageR’". To install the package, first type and execute `install.packages("languageR")`. (This generalizes to any package, using the name of the package instead of "languageR".)
library(languageR)
library(tidyverse)
library(brms)
# This will also load the lexical decision time dataset from Baayen et al (2006), which we will be modeling extensively. To see two different summaries of the dataset and the first few lines:
summary(lexdec)
str(lexdec)
head(lexdec)
View(lexdec)
# To get information about the dataset provided by the authors:
?lexdec
# Let's recode the language background variable from "NativeLanguage" to "LanguageBackground", and its levels from "English" & "Other" to "English" & "Non-English"
lexdec = lexdec %>%
rename("LanguageBackground"="NativeLanguage") %>%
mutate(LanguageBackground = fct_recode(LanguageBackground, "Non-English"="Other"))
# Let's recode the language background variable from "NativeLanguage" to "LanguageBackground", and its levels from "English" & "Other" to "English" & "Non-English"
lexdec = lexdec %>%
rename("LanguageBackground"="NativeLanguage") %>%
mutate(LanguageBackground = fct_recode(LanguageBackground, "Non-English"="Other"))
# Load the `languageR` and `brms` packages. If they're not yet installed you'll get an error saying "Error in library(languageR) : there is no package called ‘languageR’". To install the package, first type and execute `install.packages("languageR")`. (This generalizes to any package, using the name of the package instead of "languageR".)
library(languageR)
library(tidyverse)
library(brms)
# This will also load the lexical decision time dataset from Baayen et al (2006), which we will be modeling extensively. To see two different summaries of the dataset and the first few lines:
summary(lexdec)
str(lexdec)
head(lexdec)
View(lexdec)
# To get information about the dataset provided by the authors:
?lexdec
# Let's recode the language background variable from "NativeLanguage" to "LanguageBackground", and its levels from "English" & "Other" to "English" & "Non-English"
lexdec = lexdec %>%
rename("LanguageBackground"="NativeLanguage") %>%
mutate(LanguageBackground = fct_recode(LanguageBackground, "Non-English"="Other"))
rlang::last_trace()
View(lexdec)
# Frequentist stats
# Let's run our first linear regression model! We start by asking whether language background has a linear effect on log RTs:
m.f = lm(RT ~ LanguageBackground, data=lexdec)
summary(m.f)
# 4. How many data points are in the English and Non-English groups?
# Hint: Use the table() function.
table(lexdec$LanguageBackground)
# Frequentist stats
# Let's run our first linear regression model! We start by asking whether language background has a linear effect on log RTs:
m.f = lm(RT ~ LanguageBackground, data=lexdec)
summary(m.f)
# Bayesian stats
# Let's run the exact same model the Bayesian way! We haven't specified a prior, so the model will assume flat default priors.
m.b = brm(RT ~ LanguageBackground, data=lexdec)
summary(m.b)
# To see the assumed priors:
prior_summary(m.b)
contrasts(lexdec$LanguageBackground)
?contrasts
# Frequentist stats
# Let's run our first linear regression model! We start by asking whether language background has a linear effect on log RTs:
m.f = lm(RT ~ LanguageBackground, data=lexdec)
summary(m.f)
contrasts(lexdec$LanguageBackground)
lexdec %>%
group_by(LanguageBackground) %>%
summarize(Mean = mean(RT))
tmp = lexdec %>%
group_by(LanguageBackground) %>%
summarize(Mean = mean(RT))
tmp = lexdec %>%
mutate(LanguageBackground = fct_relevel(LanguageBackground, "Non-English", "English"))
contrasts(tmp$LanguageBackground)
# The dative alternation dataset from Bresnan et al. 2007
data(dative)
summary(dative)
names(dative)
library(tidyverse)
library(lme4)
library(languageR)
library(brms)
# set working directory to directory of script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# The dative alternation dataset from Bresnan et al. 2007
data(dative)
summary(dative)
names(dative)
# What's the distribution of responses?
table(dative$RealizationOfRecipient)
prop.table(table(dative$RealizationOfRecipient))
# Recall that R by default interprets factor levels in alphanumeric order, so the model will predict the log odds of the recipient being realized as a PP (prepositional object) over an NP
contrasts(dative$RealizationOfRecipient)
idioms = read.csv('../data/idiom_clean.csv')
pwd
getwd(
)
# set working directory to directory of script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd(
)
idioms = read.csv('../data/idiom_clean.csv')
data(idioms)
idioms
summary(idioms)
# set working directory to directory of script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# The dative alternation dataset from Bresnan et al. 2007
data(dative)
summary(dative)
# set working directory to directory of script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
idioms = read.csv('../data/idiom_clean.csv')
summary(idioms)
idioms[sapply(idioms, is.character)] <- lapply(idioms[sapply(idioms, is.character)],
as.factor)
summary(idioms)
idioms$workerid <- as.factor(idioms$workerid)
summary(idioms)
idioms[sapply(idioms, is.character)] <- lapply(idioms[sapply(idioms, is.character)],
as.factor)
# set working directory to directory of script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
idioms = read.csv('../data/idiom_clean.csv')
summary(idioms)
idioms[sapply(idioms, is.character)] <- lapply(idioms[sapply(idioms, is.character)],
as.factor)
idioms$workerid <- as.factor(idioms$workerid)
names(idioms)
table(idioms$correct)
table(idioms$result)
prop.table(table(idioms$result))
idiomnew <- idioms[-where(idioms$language %in% "English"), ]
idiomnew <- idioms[-which(idioms$language %in% "English"), ]
idiomsnew <- idioms[-which(idioms$language %in% "English"), ]
table(idiomsnew$result)
prop.table(table(idiomsnew$result))
contrasts(idiomsnew$result)
contrasts(idiomsnew$language)
summary(idiomsnew)
idiomsnew <- idioms[-which(idioms$language %in% "English"), -c(1,4,6,8) ]
table(idiomsnew$result)
summary(idiomsnew)
contrasts(idiomsnew$result)
contrasts(idiomsnew$language)
# Step 4A: Baseline simple logistic regression model with no random effects
m.norandom = glm(result ~ 1, data=idiomsnew, family="binomial")
summary(m.norandom)
#Logistic regression with the direct effect of language
m.norandomlang = glm(result ~ language, data = idiomsnew, family = 'binomial')
summary(m.norandomlang)
# set working directory to directory of script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# The dative alternation dataset from Bresnan et al. 2007
data(dative)
summary(dative)
names(dative)
# What's the distribution of responses?
table(dative$RealizationOfRecipient)
prop.table(table(dative$RealizationOfRecipient))
# Recall that R by default interprets factor levels in alphanumeric order, so the model will predict the log odds of the recipient being realized as a PP (prepositional object) over an NP
contrasts(dative$RealizationOfRecipient)
# We start with a simple logistic regression model (no random effects). The syntax is the same as in the linear model, but we use the function glm(). The only difference is that the assumed noise distribution is binomial.
m.norandom = glm(RealizationOfRecipient ~ 1, data=dative, family="binomial")
summary(m.norandom)
summary(lexdec)
str(lexdec)
head(lexdec)
View(lexdec)
#Logistic regression with the direct effect of language and no mixed effects of item and participant variability
m.norandomlang = glm(result ~ language, data = idiomsnew, family = 'binomial')
library(tidyverse)
library(lme4)
library(languageR)
library(brms)
# set working directory to directory of script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
idioms = read.csv('../data/idiom_clean.csv')
summary(idioms)
names(idioms)
idioms[sapply(idioms, is.character)] <- lapply(idioms[sapply(idioms, is.character)],
as.factor)
idioms$workerid <- as.factor(idioms$workerid)
table(idioms$result) # here we see that num(correct) > num(incorrect) but this is factoring in English which acts as an attention check. We can eliminate about 394 options to get 618 correct idioms.
prop.table(table(idioms$result))
idiomsnew <- idioms[-which(idioms$language %in% "English"), -c(1,4,6,8) ]
table(idiomsnew$result)
summary(idiomsnew)
prop.table(table(idiomsnew$result)).  # proportion of correct vs incorrect without reflecting the English idioms
contrasts(idiomsnew$result)
contrasts(idiomsnew$language)
# Step 4A: Baseline simple logistic regression model with no random effects - just running a prediction for the data
m.norandom = glm(result ~ 1, data=idiomsnew, family="binomial")
summary(m.norandom)
#Logistic regression with the direct effect of language and no mixed effects of item and participant variability
m.norandomlang = glm(result ~ language, data = idiomsnew, family = 'binomial')
summary(m.norandomlang)
prop.table(table(idiomsnew$result))
plogis(0.34333)
idioms = read.csv('../data/idiom_clean.csv')
summary(idioms)
names(idioms)
idioms[sapply(idioms, is.character)] <- lapply(idioms[sapply(idioms, is.character)],
as.factor)
idioms$workerid <- as.factor(idioms$workerid)
table(idioms$result) # here we see that num(correct) > num(incorrect) but this is factoring in English which acts as an attention check. We can eliminate about 394 options to get 618 correct idioms.
prop.table(table(idioms$result))
# idiomsnew <- idioms[-which(idioms$language %in% "English"), -c(1,4,6,8) ]
idiomsnew <- idioms[-which(idioms$language %in% "English"), -c(1,4,6,8) ]
# idiomsnew <- idioms[-which(idioms$language %in% "English"), -c(1,4,6,8) ]
idiomsnew <- idioms[, -c(1,4,6,8) ]
table(idiomsnew$result)
summary(idiomsnew)
prop.table(table(idiomsnew$result)).  # proportion of correct vs incorrect without reflecting the English idioms
prop.table(table(idiomsnew$result))  # proportion of correct vs incorrect without reflecting the English idioms
contrasts(idiomsnew$result)
contrasts(idiomsnew$language)
# Step 4A: Baseline simple logistic regression model with no predictors - just running a prediction for the data
m.norandom = glm(result ~ 1, data=idiomsnew, family="binomial")
summary(m.norandom)
#Logistic regression with the direct effect of language and no mixed effects of item and participant variability
m.norandomlang = glm(result ~ language, data = idiomsnew, family = 'binomial')
summary(m.norandomlang)
idiomsnew <- idioms[-which(idioms$language %in% "English"), -c(1,4,6,8) ]
idiomsnewenglish <- idioms[, -c(1,4,6,8) ]
table(idiomsnew$result)
summary(idiomsnew)
prop.table(table(idiomsnew$result))  # proportion of correct vs incorrect without reflecting the English idioms
contrasts(idiomsnew$result)
contrasts(idiomsnew$language)
prop.table(table(idiomsnew$result))
# Step 4A: Baseline simple logistic regression model with no predictors - just running a prediction for the data
m.norandom = glm(result ~ 1, data=idiomsnew, family="binomial")
summary(m.norandom)
#Logistic regression with the direct effect of language and no mixed effects of item and participant variability
m.norandomlang = glm(result ~ language, data = idiomsnew, family = 'binomial')
summary(m.norandomlang)
m.norandomlang = glm(result ~ language, data = idiomsnewenglish, family = 'binomial')
summary(m.norandomlang)
plogis(-18.91)
#Logistic regression with the direct effect of language and no mixed effects of item and participant variability
m.norandomlang = glm(result ~ language, data = idiomsnew, family = 'binomial')
summary(m.norandomlang)
m.norandomenglang = glm(result ~ language, data = idiomsnewenglish, family = 'binomial')
summary(m.norandomenglang)
plogis(19.30)
plogis(18.95)
plogis(0.38755)
# Step 4B: We start checking for mixed effects
table(idiomsnew$idiom, idiomsnew$result)
# Step 4B: We start checking for mixed effects
prop.table(table(idiomsnew$idiom, idiomsnew$result))
# Step 4B: We start checking for mixed effects
prop.table(table(idiomsnew$idiom, idiomsnew$result), mar = c(1))
# mixed effect model with this item
m.item = glmer(result ~ 1 + (1|idiom), data=idiomsnew, family="binomial")
summary(m.item)
# mixed effect model with language as a fixed effect and item as random effect
m.itemlang = glmer(result ~ language + (1|idiom), data=idiomsnew, family="binomial")
summary(m.itemlang)
plogis(0.09334)
plogis(0.59642)
plogis(0.07600)
# mixed effect model with participants as random effects
m.itempart = glmer(result ~ 1 + (1|workerid), data=idiomsnew, family="binomial")
summary(m.item)
# mixed effect model with participants as random effects and language as fixed effect
m.langpart = glmer(result ~ language + (1|workerid), data=idiomsnew, family="binomial")
summary(m.item)
library(tidyverse)
library(lme4)
library(languageR)
library(brms)
# set working directory to directory of script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# The dative alternation dataset from Bresnan et al. 2007
data(dative)
summary(dative)
names(dative)
# What's the distribution of responses?
table(dative$RealizationOfRecipient)
prop.table(table(dative$RealizationOfRecipient))
# Recall that R by default interprets factor levels in alphanumeric order, so the model will predict the log odds of the recipient being realized as a PP (prepositional object) over an NP
contrasts(dative$RealizationOfRecipient)
view(dative)
# Step 4C: What happens if we center the language factor?
prop.table(table(dative[,c("language","result")]),mar=c(1))
# Step 4C: What happens if we center the language factor?
prop.table(table(idiomsnew[,c("language","result")]),mar=c(1))
idiomsnew = idiomsnew %>%
mutate(language_mandarin = fct_relevel(language, "Mandarin Chinese"))
m = glmer(result ~ language_mandarin + (1|workerid), data=idiomsnew, family="binomial")
summary(m)
idiomsnew = idiomsnew %>%
mutate(language_rus = fct_relevel(language, "Russian"))
m = glmer(result ~ language_rus + (1|workerid), data=idiomsnew, family="binomial")
summary(m)
idiomsnew = idiomsnew %>%
mutate(language_sp = fct_relevel(language, "Spanish"))
m = glmer(result ~ language_sp + (1|workerid), data=idiomsnew, family="binomial")
summary(m)
m = glm(result ~ language_rus, data=idiomsnew, family="binomial")
summary(m)
idiomsnew = idiomsnew %>%
mutate(numLang = as.numeric(language)) %>%
mutate(cAnimacyOfRec = numLang - mean(numLang))
summary(idiomsnew)
idiomsnew = idiomsnew %>%
mutate(numLang = as.numeric(language)) %>%
mutate(cLang = numLang - mean(numLang))
summary(idiomsnew)
idioms = read.csv('../data/idiom_clean.csv')
summary(idioms)
names(idioms)
idioms[sapply(idioms, is.character)] <- lapply(idioms[sapply(idioms, is.character)],
as.factor)
idioms$workerid <- as.factor(idioms$workerid)
table(idioms$result) # here we see that num(correct) > num(incorrect) but this is factoring in English which acts as an attention check. We can eliminate about 394 options to get 618 correct idioms.
prop.table(table(idioms$result))
idiomsnew <- idioms[-which(idioms$language %in% "English"), -c(1,4,6,8) ]
idiomsnewenglish <- idioms[, -c(1,4,6,8) ]
table(idiomsnew$result)
summary(idiomsnew)
prop.table(table(idiomsnew$result))  # proportion of correct vs incorrect without reflecting the English idioms
contrasts(idiomsnew$result)
contrasts(idiomsnew$language)
prop.table(table(idiomsnew$result))
# Step 4A: Baseline simple logistic regression model with no predictors - just running a prediction for the data
m.norandom = glm(result ~ 1, data=idiomsnew, family="binomial")
summary(m.norandom)
#Logistic regression with the direct effect of language and no mixed effects of item and participant variability
m.norandomlang = glm(result ~ language, data = idiomsnew, family = 'binomial')
summary(m.norandomlang)
m.norandomenglang = glm(result ~ language, data = idiomsnewenglish, family = 'binomial')
summary(m.norandomenglang)
# Step 4B: We start checking for mixed effects
prop.table(table(idiomsnew$idiom, idiomsnew$result), mar = c(1)). # gives per-item proportions
# mixed effect model with items as random effects
m.item = glmer(result ~ 1 + (1|idiom), data=idiomsnew, family="binomial")
summary(m.item)
# mixed effect model with language as a fixed effect and item as random effect (useless because an idiom can only come from one language)
m.itemlang = glmer(result ~ language + (1|idiom), data=idiomsnew, family="binomial")
summary(m.itemlang)
# mixed effect model with participants as random effects
m.itempart = glmer(result ~ 1 + (1|workerid), data=idiomsnew, family="binomial")
summary(m.item)
# mixed effect model with participants as random effects and language as fixed effect
m.langpart = glmer(result ~ language + (1|workerid), data=idiomsnew, family="binomial")
summary(m.item)
# Step 4C: What happens if we center the language factor?
prop.table(table(idiomsnew[,c("language","result")]),mar=c(1))
idiomsnew = idiomsnew %>%
mutate(language_mandarin = fct_relevel(language, "Mandarin Chinese"))
m = glmer(result ~ language_mandarin + (1|workerid), data=idiomsnew, family="binomial")
summary(m)
idiomsnew = idiomsnew %>%
mutate(language_rus = fct_relevel(language, "Russian"))
m = glmer(result ~ language_rus + (1|workerid), data=idiomsnew, family="binomial")
summary(m)
m = glm(result ~ language_rus, data=idiomsnew, family="binomial")
summary(m)
idiomsnew = idiomsnew %>%
mutate(language_sp = fct_relevel(language, "Spanish"))
m = glmer(result ~ language_sp + (1|workerid), data=idiomsnew, family="binomial")
summary(m)
idiomsnew = idiomsnew %>%
mutate(numLang = as.numeric(language)) %>%
mutate(cLang = numLang - mean(numLang))
summary(idiomsnew)
m.c = glmer(result ~ cLang + (1|workerid), data=idiomsnew, family="binomial")
summary(m.c)
m.c = glmer(result ~ cLang + (1|workerid) + (1|idiom), data=idiomsnew, family="binomial")
summary(m.c)
plogis(0.07485)
# what if we treat the idiom as a fixed effect and the participants as random
m.c = glmer(result ~ idiom + (1/workerid), data=idiomsnew, family="binomial")
# what if we treat the idiom as a fixed effect and the participants as random
m.c = glmer(result ~ idiom + (1/workerid), data=idiomsnew, family="binomial")
summary(m.c)
# what if we treat the idiom as a fixed effect and the participants as random
m.c = glmer(result ~ idiom + (1|workerid), data=idiomsnew, family="binomial")
# what if we treat the idiom as a fixed effect and the participants as random
m.c = glmer(result ~ language + idiom + (1|workerid), data=idiomsnew, family="binomial")
# what if we treat the idiom as a fixed effect and the participants as random
m.c = glmer(result ~ language + (1|workerid), data=idiomsnew, family="binomial")
summary(m.c)
m.c = glmer(result ~ language + (1|idiom), data=idiomsnew, family="binomial")
summary(m.c)
# mixed effect model with participants as random effects and language as fixed effect
m.langpart = glmer(result ~ language + (1|workerid), data=idiomsnew, family="binomial")
summary(m.langpart)
# mixed effect model with participants as random effects
m.itempart = glmer(result ~ 1 + (1|workerid), data=idiomsnew, family="binomial")
summary(m.itempart)
# mixed effect model with items as random effects
m.item = glmer(result ~ 1 + (1|idiom), data=idiomsnew, family="binomial")
summary(m.item)
# What if we add a random slope for language across workers?
m.c = glmer(result ~ language + (1 + language|workerid), data=idiomsnew, family="binomial")
summary(m.c)
# What if we add a random slope for language across workers?
m.c = glmer(result ~ cLang + (1 + cLang|workerid), data=idiomsnew, family="binomial")
summary(m.c)
m.c = glmer(result ~ 1 + language|workerid, data=idiomsnew, family="binomial")
summary(m.c)
m.c = glmer(result ~ 1 + language||workerid, data=idiomsnew, family="binomial")
summary(m.c)
m.c = glmer(result ~ 1 + language|workerid, data=idiomsnew, family="binomial")
summary(m.c)
# Step 4A: Baseline simple logistic regression model with no predictors - just running a prediction for the data
m.norandom = glm(result ~ 1, data=idiomsnew, family="binomial")
summary(m.norandom)
# set working directory to directory of script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
idioms = read.csv('../data/idiom_clean.csv')
summary(idioms)
names(idioms)
idioms[sapply(idioms, is.character)] <- lapply(idioms[sapply(idioms, is.character)],
as.factor)
idioms$workerid <- as.factor(idioms$workerid)
table(idioms$result) # here we see that num(correct) > num(incorrect) but this is factoring in English which acts as an attention check. We can eliminate about 394 options to get 618 correct idioms.
prop.table(table(idioms$result))
idiomsnew <- idioms[-which(idioms$language %in% "English"), -c(1,4,6,8) ]
idiomsnewenglish <- idioms[, -c(1,4,6,8) ]
table(idiomsnew$result)
summary(idiomsnew)
prop.table(table(idiomsnew$result))  # proportion of correct vs incorrect without reflecting the English idioms
contrasts(idiomsnew$result)
contrasts(idiomsnew$language)
prop.table(table(idiomsnew$result))
# Step 4A: Baseline simple logistic regression model with no predictors - just running a prediction for the data
m.norandom = glm(result ~ 1, data=idiomsnew, family="binomial")
summary(m.norandom)
#Logistic regression with the direct effect of language and no mixed effects of item and participant variability
m.norandomlang = glm(result ~ language, data = idiomsnew, family = 'binomial')
summary(m.norandomlang)
# mixed effect model with items as random effects
m.item = glmer(result ~ 1 + (1|idiom), data=idiomsnew, family="binomial")
summary(m.item)
# mixed effect model with language as a fixed effect and item as random effect (useless because an idiom can only come from one language)
m.itemlang = glmer(result ~ language + (1|idiom), data=idiomsnew, family="binomial")
summary(m.itemlang)
# mixed effect model with participants as random effects
m.itempart = glmer(result ~ 1 + (1|workerid), data=idiomsnew, family="binomial")
summary(m.itempart)
# mixed effect model with participants as random effects and language as fixed effect
m.langpart = glmer(result ~ language + (1|workerid), data=idiomsnew, family="binomial")
summary(m.langpart)
m.c = glmer(result ~ language + (1 + language||workerid), data=idiomsnew, family="binomial")
summary(m.c)
m.c = glmer(result ~ language + (1 + language|workerid), data=idiomsnew, family="binomial")
summary(m.c)
m.c = glmer(result ~ language + (1 + 1|workerid) + (1 + 1|idiom) + (1 + language|workerid), data=idiomsnew, family="binomial")
summary(m.c)
m.c = glmer(result ~ language + (1 + 1|workerid) + (1 + language|workerid), data=idiomsnew, family="binomial")
m.c = glmer(result ~ language + (1 + 1|idiom) + (1 + language||workerid), data=idiomsnew, family="binomial")
m.c = glmer(result ~ language + (1 + 1|idiom) + (1 + language||workerid), data=idiomsnew, family="binomial")
summary(m.c)
m.c = glmer(result ~ (1 + language||workerid), data=idiomsnew, family="binomial")
summary(m.c)
# What if we add a random slope for language across workers?
m.c = glmer(result ~ language + (1 + language|workerid), data=idiomsnew, family="binomial")
summary(m.c)
m.c = glmer(result ~ language +  (1 + language||workerid), data=idiomsnew, family="binomial")
summary(m.c)
result
result
# mixed effect model with language as a fixed effect and item as random effect (useless because an idiom can only come from one language)
m.itemlang = glmer(result ~ language + (1|idiom), data=idiomsnew, family="binomial")
summary(m.itemlang)
#Logistic regression with the direct effect of language and no mixed effects of item and participant variability
m.norandomlang = glm(result ~ language, data = idiomsnew, family = 'binomial')
summary(m.norandomlang)
